@model CheckoutShippingAddressModel
@using Nop.Web.Models.Checkout;
@{
    Layout = "~/Views/Shared/_ColumnsOne.cshtml";

    //title
    Html.AddTitleParts(T("PageTitle.Checkout").Text);
}
<div class="page checkout-page shipping-address-page">
    @Html.Action("CheckoutProgress", "Checkout", new { step = CheckoutProgressStep.Address })
    <div class="page-title">
        <h1>@T("Checkout.ShippingAddress")</h1>
    </div>
    <div class="page-body checkout-data">
        @using (Html.BeginRouteForm("CheckoutShippingAddress", FormMethod.Post))
        {
            if (Model.AllowPickUpInStore)
            {
                <div class="section pickup-in-store">
                    <div class="selector">
                        @{
                var pickupInStoreName = T("Checkout.PickUpInStore").Text;
                if (!String.IsNullOrEmpty(Model.PickUpInStoreFee))
                {
                    pickupInStoreName = T("Checkout.PickUpInStoreAndFee", Model.PickUpInStoreFee).Text;
                }
                        }
                        @Html.CheckBoxFor(x => x.PickUpInStore)
                        <label for="@Html.FieldIdFor(model => model.PickUpInStore)">@pickupInStoreName</label>
                    </div>
                    <div class="description">
                        @T("Checkout.PickUpInStore.Description")
                    </div>
                    <script type="text/javascript">
                        $(document).ready(function () {
                            $("#@Html.FieldIdFor(model => model.PickUpInStore)").change(togglePickUpInStore);
                            togglePickUpInStore();
                        });
                        function togglePickUpInStore() {
                            if ($('#@Html.FieldIdFor(model => model.PickUpInStore)').is(':checked')) {
                                $('#shipping-addresses-form').hide();
                            } else {
                                $('#shipping-addresses-form').show();
                            }
                        }
                    </script>
                </div>
            }
            <div class="shipping-addresses" id="shipping-addresses-form">
                @Html.Widget("checkout_shipping_address_top")
                @if (Model.ExistingAddresses.Count > 0)
                {
                    <div class="section select-shipping-address">
                        <div class="title">
                            <strong>@T("Checkout.SelectShippingAddress")</strong>
                        </div>
                        <div class="address-grid">
                            @foreach (var item in Model.ExistingAddresses)
                            {
                                <div class="address-item">
                                    <ul class="address-box">
                                        <li class="name">
                                            @string.Format("{0} {1}", T("address.general.title"), item.Address2)
                                        </li>
                                        <li class="address1">
                                            @item.Address1
                                        </li>
                                    </ul>
                                    <div class="select-button">
                                        <input type="button" value="@T("Checkout.ShipToThisAddress")" class="button-1 select-shipping-address-button" onclick="setLocation('@Url.RouteUrl("CheckoutSelectShippingAddress", new { addressid = item.Id })') " />
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
                @Html.Widget("checkout_shipping_address_middle")
                <div class="section new-shipping-address">
                    <div class="title">
                        @if (Model.ExistingAddresses.Count > 0)
                        {
                            <strong>@T("Checkout.OrEnterNewAddress")</strong>
                        }
                        else
                        {
                            <strong>@T("Checkout.EnterShippingAddress")</strong>
                        }
                    </div>
                    <div class="enter-address">
                        @{
                            var validationSummary = Html.ValidationSummary(true);
                        }
                        @if (!MvcHtmlString.IsNullOrEmpty(validationSummary))
                        {
                            <div class="message-error">@validationSummary</div>
                        }
                        @{
                            var dataDictAddress = new ViewDataDictionary();
                            //Merge ModelState (required for validation)
                            dataDictAddress.ModelState.Merge(ViewData.ModelState);
                            dataDictAddress.TemplateInfo.HtmlFieldPrefix = "NewAddress";
                            @Html.Partial("_CreateOrUpdateAddress", Model.NewAddress, dataDictAddress)
                        }
                    </div>
                </div>
                @Html.Widget("checkout_shipping_address_bottom")
            </div>
            <div class="buttons">
                <input type="submit" name="nextstep" value="@T("Checkout.NextButton")" class="button-1 new-address-next-step-button" />
            </div>
        }
        <div class="section order-summary">
            <div class="title">
                <strong>@T("Checkout.OrderSummary")</strong>
            </div>
            @Html.Action("OrderSummary", "ShoppingCart")
        </div>
    </div>
</div>
